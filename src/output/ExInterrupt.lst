C51 COMPILER V9.00   EXINTERRUPT                                                           07/23/2014 19:54:01 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE EXINTERRUPT
OBJECT MODULE PLACED IN .\output\ExInterrupt.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\ExInterrupt.c BROWSE DEBUG OBJECTEXTEND PRINT(.\output\ExInterrupt.lst)
                    - OBJECT(.\output\ExInterrupt.obj)

line level    source

   1          #include<reg52.h>
   2          //#include"seg.h"
   3          #include"buzzer.h"
   4          #include"timer.h"
   5          #include"delay.h"
   6          
   7          
   8          #define IrStateStart    0
   9          #define IrStateWobble   1
  10          #define IrStateData             2
  11          
  12          #define IrStartUpLim    60
  13          #define IrStartDownLim  50
  14          
  15          #define IrData1UpLim    12//这个大一点，补偿程序执行时间。减少bug
  16          #define IrData1DownLim  7
  17          
  18          #define IrData0UpLim    7
  19          #define IrData0DownLim  3
  20          
  21          //I define The meanings of the key which i use
  22          
  23          #define IrKeyVal_CH_UP          0x47
  24          #define IrKeyVal_CH                     0x46
  25          #define IrKeyVal_CH_DOWN        0x45
  26          #define IrKeyVal_100_           0x19     
  27          #define IrKeyVal_200_           0x0d
  28          
  29          
  30          
  31          #define IrKeyVal_Next           0x44//seg flash>>
  32          #define IrKeyVal_Last           0x40//seg flash<<
  33          #define IrKeyVal_EQ         0x09//SET
  34          #define IrKeyVal_Down           0x07//-
  35          #define IrKeyVal_Up                     0x15//+
  36          
  37          #define IrKeyVal_Play           0x43//buzzer use
  38          
  39          #define IrKeyVal_0                      0x16
  40          #define IrKeyVal_1                      0x0c
  41          #define IrKeyVal_2                      0x18
  42          #define IrKeyVal_3                      0x5e
  43          #define IrKeyVal_4                      0x08
  44          #define IrKeyVal_5                      0x1c
  45          #define IrKeyVal_6                      0x5a
  46          #define IrKeyVal_7                      0x42
  47          #define IrKeyVal_8                      0x52
  48          #define IrKeyVal_9                      0x4a
  49          
  50          
  51          static unsigned char IrLowAdr;
  52          static unsigned char IrHighAdr;
  53          static unsigned char IrLowCmd;
  54          static unsigned char IrHighCmd;
C51 COMPILER V9.00   EXINTERRUPT                                                           07/23/2014 19:54:01 PAGE 2   

  55          
  56          bit SetModeFlag=0;
  57          bit SegShowDisableFlag=0;
  58          
  59          struct
  60          {       
  61                  unsigned char SegPicture;
  62                  unsigned char Number;
  63                  unsigned char IrCode[4];
  64          }IrKeyVal;
  65          
  66          //以状态转移的思想来编写遥控器解码。sjf原创
  67          
  68          void Ex0IptInit()
  69          {
  70   1              IT0=1;
  71   1              EX0=1;
  72   1              
  73   1              IrKeyVal.SegPicture=0;
  74   1              IrKeyVal.Number=0;
  75   1              IrKeyVal.IrCode[0]=0;
  76   1              IrKeyVal.IrCode[1]=0;
  77   1              IrKeyVal.IrCode[2]=0;
  78   1              IrKeyVal.IrCode[3]=0;                   
  79   1      }
  80          
  81          void Ex0() interrupt 0
  82          {
  83   1              static unsigned char IrStateFlag=IrStateStart;
  84   1          static unsigned char Ex0IptNum=0;
  85   1              static unsigned char IrData=0;
  86   1              static unsigned char IptIntervalTime=0;
  87   1                                                                              
  88   1              IptIntervalTime=T1_250us;
  89   1              T1_250us=0;
  90   1                              
  91   1              switch(IrStateFlag)
  92   1              {       
  93   2                      case IrStateStart:
  94   2                      {
  95   3                              IrStateFlag=IrStateWobble;
  96   3                              T1_250us=0;
  97   3                              TR1=1;                                                  
  98   3                      }break;
  99   2                      
 100   2                      case IrStateWobble://
 101   2                      {
 102   3                              if((IptIntervalTime>=IrStartDownLim)&&(IptIntervalTime<=IrStartUpLim))
 103   3                              {
 104   4                                      IrStateFlag=IrStateData;                
 105   4                              }
 106   3                              else
 107   3                              {
 108   4                                      IrStateFlag=IrStateStart;
 109   4                                      TR1=0;
 110   4                              }
 111   3                      }break;
 112   2      
 113   2                      case IrStateData:
 114   2                      {       
 115   3                              IrData>>=1;
 116   3                              if((IptIntervalTime>IrData1DownLim)&&(IptIntervalTime<=IrData1UpLim))
C51 COMPILER V9.00   EXINTERRUPT                                                           07/23/2014 19:54:01 PAGE 3   

 117   3                              {
 118   4                                      IrData|=0x80;   
 119   4                              }
 120   3      
 121   3                              Ex0IptNum++;
 122   3                              
 123   3                              if(Ex0IptNum==8)
 124   3                              {
 125   4                                      IrLowAdr=IrData;                         
 126   4                              }
 127   3      
 128   3                              if(Ex0IptNum==16)
 129   3                              {
 130   4                                      IrHighAdr=IrData;       
 131   4                              }
 132   3      
 133   3                              if(Ex0IptNum==24)
 134   3                              {
 135   4                                      IrLowCmd=IrData;        
 136   4                              }
 137   3                              if(Ex0IptNum==32)
 138   3                              {
 139   4                                      IrHighCmd=IrData;
 140   4                                      TR1=0;
 141   4                                      Ex0IptNum=0;
 142   4                                      IrStateFlag=IrStateStart;
 143   4                              }
 144   3                      }break;
 145   2      
 146   2                      default:break;
 147   2              }
 148   1      }
 149          
 150          static void IrKeyValueProcess()
 151          { 
 152   1              if((IrLowCmd==(~IrHighCmd))&&(IrLowAdr==0x00)&&(IrHighAdr=0xff))
 153   1              {
 154   2                      switch(IrLowCmd)
 155   2                      {
 156   3                              case IrKeyVal_0:{IrKeyVal.Number=0;}break;
 157   3                              case IrKeyVal_1:{IrKeyVal.Number=1;}break;
 158   3                              case IrKeyVal_2:{IrKeyVal.Number=2;}break;
 159   3                              case IrKeyVal_3:{IrKeyVal.Number=3;}break;
 160   3                              case IrKeyVal_4:{IrKeyVal.Number=4;}break;
 161   3                              case IrKeyVal_5:{IrKeyVal.Number=5;}break;
 162   3                              case IrKeyVal_6:{IrKeyVal.Number=6;}break;
 163   3                              case IrKeyVal_7:{IrKeyVal.Number=7;}break;
 164   3                              case IrKeyVal_8:{IrKeyVal.Number=8;}break;
 165   3                              case IrKeyVal_9:{IrKeyVal.Number=9;}break;
 166   3                              
 167   3                              case IrKeyVal_Up:
 168   3                              {
 169   4                                      if(++IrKeyVal.Number==10)
 170   4                                      {
 171   5                                              IrKeyVal.Number=0;
 172   5                                      }
 173   4                              }break;
 174   3      
 175   3                              case IrKeyVal_Down:
 176   3                              {
 177   4                                      if(IrKeyVal.Number==0)
 178   4                                      {
C51 COMPILER V9.00   EXINTERRUPT                                                           07/23/2014 19:54:01 PAGE 4   

 179   5                                              IrKeyVal.Number=9;
 180   5                                      }
 181   4                                      else
 182   4                                      { 
 183   5                                              IrKeyVal.Number--;
 184   5                                      }
 185   4                              }break;
 186   3                              
 187   3                              case IrKeyVal_Next:
 188   3                              {
 189   4                                      if(++IrKeyVal.SegPicture==4)
 190   4                                      {
 191   5                                              IrKeyVal.SegPicture=0;
 192   5                                      }
 193   4                              }break;
 194   3      
 195   3                              case IrKeyVal_Last:
 196   3                              {
 197   4                                      if(IrKeyVal.SegPicture==0)
 198   4                                      {
 199   5                                              IrKeyVal.SegPicture=4;
 200   5                                      }
 201   4                                      else
 202   4                                      { 
 203   5                                              IrKeyVal.SegPicture--;
 204   5                                      }
 205   4                              }break;
 206   3      
 207   3                              case IrKeyVal_EQ:
 208   3                              {
 209   4                                      SetModeFlag=~SetModeFlag; //
 210   4                              }break;                                                                                      
 211   3                              
 212   3                              case IrKeyVal_Play:
 213   3                              {
 214   4                                       BuzzerFlag=~BuzzerFlag;  //
 215   4                              }break;//play music
 216   3                      
 217   3                              default:
 218   3                              {
 219   4                                      IrKeyVal.IrCode[0]=IrLowAdr;
 220   4                                      IrKeyVal.IrCode[1]=IrHighAdr;
 221   4                                      IrKeyVal.IrCode[2]=IrLowCmd;
 222   4                                      IrKeyVal.IrCode[3]=IrHighCmd;
 223   4                              } break; 
 224   3                      }
 225   2              IrLowAdr=0x00;
 226   2              IrHighAdr=0x00;
 227   2              IrLowCmd=0x00;
 228   2              IrHighCmd=0x00;
 229   2              }
 230   1      }
 231          
 232          void IrKeyMainLoop()
 233          {
 234   1              if(IrScanFlag)
 235   1              {
 236   2                      IrScanFlag=0;
 237   2                      IrKeyValueProcess();
 238   2              
 239   2              }
 240   1      }
C51 COMPILER V9.00   EXINTERRUPT                                                           07/23/2014 19:54:01 PAGE 5   

 241          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    359    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
