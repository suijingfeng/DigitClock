C51 COMPILER V9.00   SEG                                                                   07/23/2014 19:54:00 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SEG
OBJECT MODULE PLACED IN .\output\seg.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\seg.c BROWSE DEBUG OBJECTEXTEND PRINT(.\output\seg.lst) OBJECT(.\output
                    -\seg.obj)

line level    source

   1          #include<reg52.h>
   2          #include"MacroAndConst.h"
   3          #include"Timer.h"
   4          
   5          #define DataPort P0
   6          
   7          sbit LedBitSel=P2^7;
   8          sbit LedSegSel=P2^6;
   9          
  10          bit SetTimeFlag=0;
  11          bit SegJumpShowFlag=0;
  12          
  13          const unsigned char code LedDisCode[45]=
  14          {
  15                  0x3f,0x06,0x5b,0x4f,0x66,//0,1,2,3,4,
  16                  0x6d,0x7d,0x07,0x7f,0x6f,//5,6,7,8,9,//5=S
  17                  0x77,0x7c,0x39,0x5e,0x79,//A,b,C,d,E,
  18                  0x71,0x40,0x63,0x72,0x00,//F,'-','.','R',' ',
  19                  0xbf,0x86,0xdb,0xcf,0xe6,//0.,1.,2.,3.,4.,
  20                  0xed,0xfd,0x87,0xff,0xef,//5.,6.,7.,8.,9.
  21                  0x76,0x30,0x38,0x33,0x27,//H,I,L,M,m
  22                  0x37,0x31,0x3e,0x3c,0x1e,//N,T,u,W,w
  23                  0x5c,0x3e,0x6e,0x73,0x75//o,U,y,P
  24          };
  25          
  26          
  27          const unsigned char code ERROR[5]={14,'R','R',0,'R'};
  28          
  29          //unsigned char LedDisBuffer[9]={0,0,'-',0,0,'-',0,0,' '};//hour,minute,second
  30          unsigned char SegFlashBuffer[24]={
  31                                    2,0,0,0,'-',0,0,'-',0,0,'-',0,'-',
  32                                    0,0,'-',0,0,'-',0,0,'-',
  33                                                                           0,0};
  34          
  35          unsigned char g_uBufPosition=7;//global
  36          
  37          static void SendLedSegData(uchar dat)
  38          {
  39   1              //DataPort=~dat;//共阳
  40   1              DataPort=dat;//共阴
  41   1              LedSegSel=1;
  42   1              LedSegSel=0;
  43   1      }
  44          
  45          static void SendLedBitData(unsigned char dat)
  46          {
  47   1              uchar temp;
  48   1      //      temp=(0x80>>dat);//共阳
  49   1              temp=~(0x80>>dat);
  50   1              DataPort=temp;
  51   1      
  52   1              LedBitSel=1;
  53   1              LedBitSel=0;
  54   1      }
C51 COMPILER V9.00   SEG                                                                   07/23/2014 19:54:00 PAGE 2   

  55           
  56          void SegJumpShow(unsigned char* pBuffer)
  57          {
  58   1          unsigned char temp;
  59   1      
  60   1              if(SegJumpShowFlag&SegJump1HzFlag)
  61   1              {       
  62   2                      SegJump1HzFlag=0;
  63   2                      temp=pBuffer[g_uBufPosition];
  64   2                      pBuffer[g_uBufPosition]=pBuffer[8];
  65   2                      pBuffer[8]=temp;                                
  66   2              }       
  67   1      }
  68          
  69          void LedDisplay(uchar* pBuffer)
  70          {
  71   1              static uchar LedDisPos=0;
  72   1              
  73   1              if(SegScanFlag)
  74   1              {                                       
  75   2                      SegScanFlag=0;  
  76   2                      SendLedBitData(8);//消影，适用于共阳极数码管
  77   2                      if(((pBuffer[LedDisPos]>=0)&&(pBuffer[LedDisPos]<=15))||((pBuffer[LedDisPos]>=20)&&(pBuffer[LedDisPos]<=
             -29)))
  78   2                      {
  79   3                              SendLedSegData(LedDisCode[pBuffer[LedDisPos]]); 
  80   3                      }
  81   2                      else if(pBuffer[LedDisPos]=='-')
  82   2                      {
  83   3                              SendLedSegData(LedDisCode[16]);
  84   3                      }
  85   2                      else if(pBuffer[LedDisPos]=='.')
  86   2                      {
  87   3                              SendLedSegData(LedDisCode[17]);
  88   3                      }
  89   2                      else if(pBuffer[LedDisPos]=='R')
  90   2                      {
  91   3                              SendLedSegData(LedDisCode[18]);
  92   3                      }
  93   2                      else if(pBuffer[LedDisPos]==' ')
  94   2                      {
  95   3                              SendLedSegData(LedDisCode[19]);
  96   3                      }
  97   2                      else if(pBuffer[LedDisPos]=='H')
  98   2                      {
  99   3                              SendLedSegData(LedDisCode[30]);
 100   3                      }
 101   2                      else if(pBuffer[LedDisPos]=='I')
 102   2                      {
 103   3                              SendLedSegData(LedDisCode[31]);
 104   3                      }
 105   2                      else if(pBuffer[LedDisPos]=='L')
 106   2                      {
 107   3                              SendLedSegData(LedDisCode[32]);
 108   3                      }
 109   2                      else if(pBuffer[LedDisPos]=='M')
 110   2                      {
 111   3                              SendLedSegData(LedDisCode[33]);
 112   3                      }
 113   2                      else if(pBuffer[LedDisPos]=='m')
 114   2                      {
 115   3                              SendLedSegData(LedDisCode[34]);
C51 COMPILER V9.00   SEG                                                                   07/23/2014 19:54:00 PAGE 3   

 116   3                      }
 117   2                      else if(pBuffer[LedDisPos]=='N')
 118   2                      {
 119   3                              SendLedSegData(LedDisCode[35]);
 120   3                      }
 121   2                      else if(pBuffer[LedDisPos]=='T')
 122   2                      {
 123   3                              SendLedSegData(LedDisCode[36]);
 124   3                      }
 125   2                      else if(pBuffer[LedDisPos]=='U')
 126   2                      {
 127   3                              SendLedSegData(LedDisCode[37]);
 128   3                      }
 129   2                      else if(pBuffer[LedDisPos]=='W')
 130   2                      {
 131   3                              SendLedSegData(LedDisCode[38]);
 132   3                      }
 133   2                      else if(pBuffer[LedDisPos]=='w')
 134   2                      {
 135   3                              SendLedSegData(LedDisCode[39]);
 136   3                      }
 137   2                      else if(pBuffer[LedDisPos]=='o')
 138   2                      {
 139   3                              SendLedSegData(LedDisCode[40]);
 140   3                      }
 141   2                      SendLedBitData(LedDisPos);
 142   2                      
 143   2                      if(++LedDisPos>7)
 144   2                      {
 145   3                              LedDisPos=0;
 146   3                      }
 147   2                      
 148   2                      SegJumpShow(pBuffer);   
 149   2              }                       
 150   1      }
 151          /*
 152          void SegFlash()
 153          {
 154                  unsigned char i=0;
 155                  static unsigned char StartCpyPos=0;
 156          
 157                  if(SegFlash1s)
 158                  {
 159                          SegFlash1s=0;
 160                          
 161                          for(i=0;i<8;i++)
 162                          {
 163                                  LedDisBuffer[i]=SegFlashBuffer[i+StartCpyPos];  
 164                          }
 165                          StartCpyPos++;
 166                          if(StartCpyPos==14)
 167                          {
 168                                  StartCpyPos=0;
 169                          }
 170                   }
 171          }
 172          */
 173          
 174          /*
 175          void SetClock(uchar hour,uchar minute,uchar second)
 176          {
 177                  LedDisBuffer[0]=hour/10;
C51 COMPILER V9.00   SEG                                                                   07/23/2014 19:54:00 PAGE 4   

 178                  LedDisBuffer[1]=hour%10;
 179                  LedDisBuffer[2]='-';
 180                  LedDisBuffer[3]=minute/10;
 181                  LedDisBuffer[4]=minute%10;
 182                  LedDisBuffer[5]='-';
 183                  LedDisBuffer[6]=second/10;
 184                  LedDisBuffer[7]=second%10;
 185          }
 186          */
 187          
 188          /*使用AT89S52系统时钟编辑显示时间*
 189          void RunClock(void)
 190          {
 191                  if(Time1S)
 192                  {
 193                          Time1S = 0 ;
 194                          if(++LedDisBuffer[7]==10)
 195                          {
 196                                  LedDisBuffer[7]=0;
 197                                  if(++LedDisBuffer[6]==6)
 198                                  {
 199                                          LedDisBuffer[6] = 0 ;
 200                                          if(++LedDisBuffer[4] == 10)
 201                                          {       
 202                                                  LedDisBuffer[4] = 0 ;
 203                                                  if(++LedDisBuffer[3] == 6)
 204                                                  {
 205                                                          LedDisBuffer[3] = 0 ;
 206                                                          if(LedDisBuffer[0]<2)
 207                                                          {
 208                                                                  if(++LedDisBuffer[1]==10)
 209                                                                  {
 210                                                                          LedDisBuffer[1]=0;
 211                                                                          LedDisBuffer[0]++;
 212                                                                  }
 213                                                          }
 214                                                          else
 215                                                          {
 216                                                                  if(++LedDisBuffer[1]==4)
 217                                                                  {
 218                                                                          LedDisBuffer[1] = 0 ;
 219                                                                          LedDisBuffer[0] = 0 ;
 220                                                                  }
 221                                                          }
 222                                                  }
 223                                          }
 224                                  }
 225                          }
 226                  }
 227          }
 228          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    451    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.00   SEG                                                                   07/23/2014 19:54:00 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
